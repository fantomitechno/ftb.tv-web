---
import { getChannel, isValidCookie } from "../../utils/cookie";
import { prisma } from "../../utils/database";
import LinkFiltersView from "../../components/links/LinkFiltersView.astro";
const token = Astro.cookies.get("token")?.value ?? "";

if (!isValidCookie(token)) return new Response("", { status: 400 });

const channelId = getChannel(token);

let linkFilter = await prisma.linkFilters.findUniqueOrThrow({
  where: { channelId },
});

if (Astro.request.method === "DELETE") {
  await prisma.linkFilters.update({
    where: {
      channelId,
    },
    data: {
      untrustedLinks: [],
      trustedLinks: ["clips.twitch.tv"],
      deleteAll: true,
    },
  });
}

if (Astro.request.method === "PUT") {
  const data = await Astro.request.formData();
  linkFilter.untrustedLinks = (data.get("untrusted")?.valueOf() as string)
    .split(",")
    .map((w) => w.trim())
    .filter((w) => w.length > 0);
  linkFilter.trustedLinks = (data.get("trusted")?.valueOf() as string)
    .split(",")
    .map((w) => w.trim())
    .filter((w) => w.length > 0);
  linkFilter.deleteAll = data.has("deleteAll");

  await prisma.linkFilters.update({
    where: {
      channelId,
    },
    data: linkFilter,
  });
}
---

{Astro.request.method === "PUT" && <LinkFiltersView links={linkFilter} />}

{
  Astro.request.method === "GET" && (
    <form hx-put={`/api/links`} hx-target="this" hx-swap="outerHTML">
      <label>Delete all links</label>:
      {linkFilter.deleteAll ? (
        <input type="checkbox" name="deleteAll" value="delete" checked />
      ) : (
        <input type="checkbox" name="deleteAll" value="delete" />
      )}
      <br />
      <label> Trusted links: </label>
      <textarea name="trusted">{linkFilter.trustedLinks.join(", ")}</textarea>
      <label> Untrusted links: </label>
      <textarea name="untrusted">
        {linkFilter.untrustedLinks.join(", ")}
      </textarea>
      <button>Submit</button>
      <button hx-delete={`/api/links`}>Reset</button>
    </form>
  )
}

{
  Astro.request.method === "DELETE" && (
    <script is:inline>window.location.reload()</script>
  )
}
