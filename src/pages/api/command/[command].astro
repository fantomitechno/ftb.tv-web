---
import CommandView from "../../../components/command/CommandView.astro";
import { getChannel, isValidCookie } from "../../../utils/cookie";
import { prisma } from "../../../utils/database";

const { command: commandName } = Astro.params;
const token = Astro.cookies.get("token")?.value ?? "";

if (!commandName || !isValidCookie(token))
  return new Response("", { status: 400 });

const channelId = getChannel(token);

const command = await prisma.command.findFirst({
  where: {
    commandName: commandName,
    channelId,
  },
});

if (!command) return new Response("", { status: 404 });

if (Astro.request.method === "PUT") {
  const data = await Astro.request.formData();
  command.commandName = (data.get("name")?.valueOf() as string) ?? "";
  command.message = (data.get("message")?.valueOf() as string).length
    ? (data.get("message")?.valueOf() as string)
    : null;
  command.isMod = data.has("isMod");
  command.reply = data.has("reply");
  if (
    ((await prisma.command.findFirst({
      where: { commandName: command.commandName, channelId },
    })) &&
      commandName != command.commandName) ||
    command.commandName == ""
  )
    return new Response("", { status: 409 });
  await prisma.command.update({
    where: {
      channelCommand: {
        channelId,
        commandName,
      },
    },
    data: command,
  });
} else if (Astro.request.method === "DELETE") {
  await prisma.command.delete({
    where: {
      channelCommand: {
        channelId,
        commandName,
      },
    },
  });
}
---

{
  Astro.request.method === "GET" && (
    <form
      hx-put={`/api/command/${commandName}`}
      hx-target="this"
      hx-swap="outerHTML"
    >
      <label>Name</label>:{" "}
      <input type="text" name="name" value={command.commandName} />
      <label>Message</label>:
      <input type="text" name="message" value={command.message} />
      <label>Is Mod only</label>:
      {command.isMod ? (
        <input type="checkbox" name="isMod" value="mod" checked />
      ) : (
        <input type="checkbox" name="isMod" value="mod" />
      )}
      <label>Use reply</label>:
      {command.reply ? (
        <input type="checkbox" name="reply" value="reply" checked />
      ) : (
        <input type="checkbox" name="reply" value="reply" />
      )}
      <button>Submit</button>
      <button hx-delete={`/api/command/${commandName}`}>Remove</button>
    </form>
  )
}
{
  Astro.request.method === "PUT" && (
    <CommandView command={command} edit={true} />
  )
}
{
  Astro.request.method === "DELETE" && (
    <script is:inline>window.location.reload();</script>
  )
}
