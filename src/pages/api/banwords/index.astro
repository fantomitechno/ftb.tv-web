---
import { getChannel, isValidCookie } from "../../../utils/cookie";
import { prisma } from "../../../utils/database";
import BanWordsSection from "../../../components/banwords/BanWordsSection.astro";
import BanWordsView from "../../../components/banwords/BanWordsView.astro";
const token = Astro.cookies.get("token")?.value ?? "";

if (!isValidCookie(token)) return new Response("", { status: 400 });

const channelId = getChannel(token);

let banwords = await prisma.banWords.findFirst({ where: { channelId } });
if (!banwords) banwords = await prisma.banWords.create({ data: { channelId } });

if (Astro.request.method === "DELETE") {
  await prisma.banWords.update({
    where: {
      channelId,
    },
    data: {
      blackList: [],
      whiteList: [],
    },
  });
}

if (Astro.request.method === "PUT") {
  const data = await Astro.request.formData();
  const globalBanwords = await prisma.banWords.findFirst({
    where: { channelId: "global" },
  });
  banwords.blackList = (data.get("blacklist")?.valueOf() as string)
    .split(",")
    .map((w) => w.trim())
    .filter((w) => !globalBanwords?.blackList.includes(w) && w.length > 0);
  banwords.whiteList = (data.get("whitelist")?.valueOf() as string)
    .split(",")
    .map((w) => w.trim())
    .filter((w) => globalBanwords?.blackList.includes(w) && w.length > 0);

  await prisma.banWords.update({
    where: {
      channelId,
    },
    data: banwords,
  });
}
---

{Astro.request.method === "POST" && <BanWordsSection banwords={banwords} />}
{Astro.request.method === "PUT" && <BanWordsView banwords={banwords} />}

{
  Astro.request.method === "GET" && (
    <form hx-put={`/api/banwords/`} hx-target="this" hx-swap="outerHTML">
      <label> Blacklist: </label>
      <textarea name="blacklist">{banwords.blackList.join(", ")}</textarea>
      <label> Whitelist: </label>
      <textarea name="whitelist">{banwords.whiteList.join(", ")}</textarea>
      <button>Submit</button>
      <button hx-delete={`/api/banwords/`}>Reset</button>
    </form>
  )
}

{
  Astro.request.method === "DELETE" && (
    <script is:inline>window.location.reload()</script>
  )
}
